{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nFrontLeft = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nFrontRight = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\noptical = Optical(Ports.PORT10)\nConveyorMotor = Motor(Ports.PORT5, GearSetting.RATIO_36_1, True)\nStringMotor = Motor(Ports.PORT15, GearSetting.RATIO_36_1, True)\nLeftFlywheel = Motor(Ports.PORT6, GearSetting.RATIO_18_1, False)\nRightFlywheel = Motor(Ports.PORT7, GearSetting.RATIO_18_1, True)\nstring = DigitalOut(brain.three_wire_port.a)\nBackLeft = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nBackRight = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject: Competition\n#\tAuthors: Steven Canton and Karter Crites (Bettered by Katherine Andrews :) )\n#\tCreated: Sep 30, 2022\n# \n# ------------------------------------------\n\n# Begin project code\n\n# Port 1 FrontLeft, Green, Reverse\n# Port 2 FrontRight, Green, Normal\n# Port 3 BackLeft, Green, Reverse\n# Port 8 BackRight, Green, Normal\n# Port 5 ConveyorMotor, Red, Reverse\n# Port 6 LeftFlywheel, Green, Normal\n# Port 7 RightFlywheel, Green, Reverse\n# Port 15 StringMotor, Red, Reverse\n# Port 10 optical\n\n# Port A string\n\n#Motor things\nFlywheel = MotorGroup(LeftFlywheel, RightFlywheel)\nLeft = MotorGroup(FrontLeft, BackLeft)\nRight = MotorGroup(FrontRight, BackRight)\nConveyor = MotorGroup(ConveyorMotor, StringMotor)\n\n#Print port setings so that team can seamlessly know where each motor is connected\nbrain.screen.print(\"Front Left Wheel: 1 Back: 3\")\nbrain.screen.next_row()\nbrain.screen.print(\"Front Right Wheel: 2 Back: 4\")\nbrain.screen.next_row()\nbrain.screen.print(\"Conveyor System: 5\")\nbrain.screen.next_row()\nbrain.screen.print(\"Left Flywheel: 6\")\nbrain.screen.next_row()\nbrain.screen.print(\"Right Flywheel: 7\")\nbrain.screen.next_row()\nbrain.screen.print(\"Optical: 11\")\nbrain.screen.next_row()\nbrain.screen.print(\"The string launchers: A\")\nbrain.screen.next_row()\nbrain.screen.print(\"The string motors: 15\")\n\n#Set velocities\nLeft.set_velocity(85,PERCENT)\nRight.set_velocity(85,PERCENT)\nFlywheel.set_velocity(100,PERCENT)\nConveyor.set_velocity(100,PERCENT)\nStringMotor.set_velocity(100,PERCENT)\nConveyor.set_max_torque(100,PERCENT)\n\n#Variables\nFlywheelSpeed = 12.0\nintakeIn = False\nintakeOut = False\n\n#Setting motors to their respective stopping positions\nLeft.set_stopping(BRAKE)\nRight.set_stopping(BRAKE)\nFlywheel.set_stopping(BRAKE)\nConveyor.set_stopping(BRAKE)\nStringMotor.set_stopping(BRAKE)\n\n#Function for controller printing\ndef printing(num):\n    controller_1.screen.clear_screen()\n    controller_1.screen.set_cursor(1,1)\n    controller_1.screen.print(\"Flywheel speed: \")\n    controller_1.screen.set_cursor(1,16)\n    controller_1.screen.print(num)\n\ndef pre_autonomous():\n    #Functions For Controller Inputs:\n    #Robot Movement (Axis 2 and 3)\n    def Axis3Changed():\n        Left.spin(FORWARD, controller_1.axis3.position(), VOLT)\n\n    def Axis2Changed():\n        Right.spin(FORWARD, controller_1.axis2.position(), VOLT)\n\n    #Conveyor (Button B)\n    def ButtonBPressed():\n        Conveyor.spin(FORWARD)\n    def ButtonBReleased():\n        Conveyor.stop()\n    #Flywheel (Button A)\n    def ButtonAPressed():\n        Flywheel.spin(FORWARD, FlywheelSpeed, VOLT)\n\n    def ButtonAReleased():\n        Flywheel.stop()\n\n    #Changing the Speed of the Flywheel (L2 and R2) and making the flwheel go as well\n    def LeftB2():\n        global FlywheelSpeed\n        FlywheelSpeed = 12\n        Flywheel.spin(FORWARD, FlywheelSpeed, VOLT)\n\n    def LeftB2R():\n        Flywheel.stop()\n\n    def RightB2():\n        global FlywheelSpeed\n        FlywheelSpeed = 9.5\n        Flywheel.spin(FORWARD, FlywheelSpeed, VOLT)\n\n    def RightB2R():\n        Flywheel.stop()\n\n    #Endgame string launching\n    def LeftB1P():\n        Conveyor.spin(REVERSE)\n\n    def LeftB1R():\n        # if intakeOut == False:\n        #     intakeOut = True\n        # elif intakeOut == True:\n        #     intakeOut = False\n        Conveyor.stop()\n\n    def RightB1P():    \n        Conveyor.spin(FORWARD)\n\n    def RightB1R():\n        # if intakeIn == False:\n        #     intakeIn = True\n        # elif intakeIn == True:\n        #     intakeIn = False\n        Conveyor.stop()\n\n    def ButtonXPressed():\n        if controller_1.buttonUp.pressing():\n            string.set(True)\n            wait(.2,SECONDS)\n            string.set(False)\n\n    def ButtonUpPressed():\n        # StringMotor.spin(FORWARD)\n        if controller_1.buttonX.pressing():\n            string.set(True)\n            wait(.2,SECONDS)\n            string.set(False)\n        \n    # system event handlers\n    controller_1.axis3.changed(Axis3Changed)\n    controller_1.axis2.changed(Axis2Changed)\n    controller_1.buttonB.pressed(ButtonBPressed)\n    controller_1.buttonA.pressed(ButtonAPressed)\n    controller_1.buttonB.released(ButtonBReleased)\n    controller_1.buttonA.released(ButtonAReleased)\n    controller_1.buttonL2.pressed(LeftB2)\n    controller_1.buttonR2.pressed(RightB2)\n    controller_1.buttonL2.released(LeftB2R)\n    controller_1.buttonR2.released(RightB2R)\n    controller_1.buttonL1.pressed(LeftB1P)\n    controller_1.buttonL1.released(LeftB1R)\n    controller_1.buttonR1.pressed(RightB1P)\n    controller_1.buttonR1.released(RightB1R)\n    controller_1.buttonX.pressed(ButtonXPressed)\n    controller_1.buttonUp.pressed(ButtonUpPressed)\n    # controller_1.button\n    # controller_1.buttonX.released(autonomous)\n\n    # add 15ms delay to make sure events are registered correctly.\n    wait(15, MSEC)\n\ndef autonomous():\n    # Left.spin(FORWARD)\n    # Right.spin(FORWARD)\n    # wait(2)\n    # left.stop\n    # right.stop\n\n    # Left.spin(FORWARD)\n    # Conveyor.spin(REVERSE)\n    # wait(.5, SECONDS)\n    # Conveyor.stop()\n\n    \n\n    '''\n\n    THIS IS A MANUAL, PLEASE READ BEFORE PROGRAMMING AUTONOMOUS\n    Use MoveForward() MoveBack() TurnLeft() and TurnRight() to move the robot easier. \n    Inside the parentheses input the amount of time (in seconds) you want the robot \n    to move or turn in the respective direction. You also need to put in the amount of\n    volts that will go to the motors when the function is called. \n\n    For MoveForward() there is a parameter that allows you to use the conveyor whilst you move.\n    Input either True or False into this area to say if the conveyor should move.\n\n    There is also ConveyorSpin() and FlywheelSpin() which ConveyorSpin() only has time as a \n    parameter, whilst FlywheelSPin has both the time and the volts.\n\n    There is also OpticalChecker(), which is the roller spinner. I could defo change the name.\n    It has no parameters but is currently not able to use\n\n    Also, StringStart() and StringEnd() have no parameters and dont have any wait functions,\n    so you can make it drop the string while moving the robot. \n\n    ShootDisk() moves all of the conveyor motors as well as the Flywheels, its used as a general\n    function when you want to have the disks to shoot.\n    It only uses one parameter, which is the amount of time you want the motors to move.\n\n    RotateForward() and RotateReverse() are functions that take in a number and a list for the\n    all of the motors you want to rotate in the respective direction of the function.\n    The number that you input is the amount of seconds you want those motors to rotate.\n\n    Zero volts does nothing and 12 volts go the fastest that the motor can move\n\n    The fuctions should be like this:\n\n    MoveForward([the amount of seconds you want], [volts from 0 - 12], [If you would like]\n                                                                [the cnoveyor to go while moving]) \n    MoveBack([seconds], [volts]) \n    TurnLeft([seconds], [volts])\n    TurnRight([seconds], [volts])\n    ConveyorSpin([seconds], [volts], [direction])\n    FlywheelSpin([seconds], [volts])\n    OpticalChecker()\n    StringStart()\n    StringEnd()\n    ShootDisk([seconds])\n    RotateForward([seconds], [list of motors])\n    RotateReverse([seconds], [list of motors])\n\n    Note that autonomous is only 15 seconds, so be mindfull of how much time you spend using the functions\n    '''\n\n    # This autonomous is set so its able to get to the roller from the get go (2 preloads)\n    # Mostly Finished!\n    \n    def FromRoller():\n        Flywheel.spin(FORWARD)\n        #270 degree rotation\n        MoveBack(.39, 12)\n        wait(.3,SECONDS)\n        OpticalChecker()\n        wait(.2,SECONDS)\n        # Rolling Motor\n        MoveForward(.35, 7)\n        wait(.3,SECONDS)\n        TurnLeft(.2,5)\n        wait(.3,SECONDS)\n        wait(1.5,SECONDS)\n        ShootDisk(1.5, 12)\n        ShootDisk(2,12)\n\n    #Start of Functions for Autonomous\n    def MoveForward(timeF, WheelSpeed = 12, inp = False):\n        Left.spin(FORWARD, WheelSpeed, VOLT)\n        Right.spin(FORWARD, WheelSpeed, VOLT)\n\n        if inp == True:\n            Conveyor.spin(FORWARD, WheelSpeed, VOLT)\n    \n        wait(timeF, SECONDS)\n\n        if inp == True:\n            Conveyor.stop()\n\n        Left.stop\n        Right.stop()\n\n    def MoveBack(timeB, WheelSpeed = 12):\n        Left.spin(REVERSE, WheelSpeed , VOLT)\n        Right.spin(REVERSE, WheelSpeed, VOLT)\n        wait(timeB, SECONDS)\n        Left.stop()\n        Right.stop()\n\n    def TurnLeft(timeL, WheelSpeed = 12):\n        Left.spin(REVERSE, WheelSpeed, VOLT)\n        Right.spin(FORWARD, WheelSpeed, VOLT)\n        wait(timeL, SECONDS)\n        Left.stop()\n        Right.stop()\n\n    def TurnRight(timeR, WheelSpeed = 12):\n        Left.spin(FORWARD, WheelSpeed, VOLT)\n        Right.spin(REVERSE, WheelSpeed, VOLT)\n        wait(timeR, SECONDS)\n        Left.stop()\n        Right.stop()\n\n    def ConveyorSpin(timeV, ConveyorSpeed = 12, forr = FORWARD):\n        Conveyor.spin(forr, ConveyorSpeed, VOLT)\n        wait(timeV, SECONDS)\n        Conveyor.stop()\n\n    def FlywheelSpin(timeG, GS = 12):\n        Flywheel.spin(FORWARD, GS, VOLT)\n        wait(timeG, SECONDS)\n        Flywheel.stop()\n\n    def ShootDisk(timeD, AllSpeed = 12):\n        Conveyor.spin(FORWARD, AllSpeed, VOLT)\n        Flywheel.spin(FORWARD, AllSpeed, VOLT)\n        wait(timeD, SECONDS)\n        Conveyor.stop()\n        Flywheel.stop()\n\n    def OpticalChecker():\n        optical.set_light(LedStateType.ON)\n        optical.set_light_power(25, PERCENT)\n\n        Left.spin(REVERSE)\n        Right.spin(REVERSE)\n\n        colorFound = False\n        while colorFound == False:\n            if optical.color() == Color.RED:\n                colorFound = True\n                startColor = Color.BLUE\n                opColor = Color.RED\n                controller_1.screen.print(\"Red\")\n    \n            elif optical.color() == Color.BLUE:\n                colorFound = True\n                startColor = Color.RED\n                opColor = Color.BLUE\n                controller_1.screen.print(\"Blue\")\n\n        Conveyor.spin(REVERSE)\n        wait(.2,SECONDS)\n\n        done = False\n        while done == False:\n            if optical.color() == startColor:\n                Conveyor.spin(REVERSE, 12, VOLT)\n            elif optical.color() == opColor:\n                wait(.1, SECONDS)\n                done = True\n                Conveyor.stop()\n                Left.stop()\n                Right.stop()\n\n        if optical.color() == startColor:\n            Conveyor.spin(FORWARD)\n            wait(.2, SECONDS)\n            Conveyor.stop()\n\n        optical.set_light(LedStateType.OFF)\n\n    def String():\n        StringMotor.spin(FORWARD)\n        wait(.5,SECONDS)\n        StringMotor.stop()\n\n    def RotateForward(sec, motors):\n        for motor in motors:\n            motor.spin(FORWARD)\n        wait(sec, SECONDS)\n        for motor in motors:\n            motor.stop()\n\n    def RotateReverse(sec, motors):\n        for motor in motors:\n            motor.spin(REVERSE)\n        wait(sec, SECONDS)\n        for motor in motors:\n            motor.stop()\n\n    # End of autonomous functions\n\n    # Only have ONE of these uncommented\n\n    wait(.3,SECONDS)\n\n    FromRoller()\n    # RoboNotWorkFromRoller()\n    # NotRoller()\n    # NotRollerTowardRoller()\n    # OpticalChecker()\n\n    # MoveBack(.5, 6)\n    # wait(.2, SECONDS)\n    # MoveForward(.5, 6)\n\ndef user_control():\n    pass\n\n\n#create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"FrontLeft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"FrontRight","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"optical","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{"id":"partner"},"triportSourcePort":22},{"port":[5],"name":"ConveyorMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[15],"name":"StringMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[6],"name":"LeftFlywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[7],"name":"RightFlywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"string","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[3],"name":"BackLeft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"BackRight","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}